

-- Data Cleaning
--Selecting all the data before cleaning
SELECT * 
FROM PortfolioProject..NashvilleHousing

--1
--Standarizing Date Format
SELECT SaleDate, CONVERT(Date, SaleDate)
FROM PortfolioProject..NashvilleHousing

UPDATE PortfolioProject..NashvilleHousing
SET SaleDate = CONVERT(Date, SaleDate)

--That method does not work, so let us try another one
--ADDING new column
ALTER TABLE PortfolioProject..NashvilleHousing
ADD SaleDateConverted Date;


--UPDATING new column with new Date format
UPDATE PortfolioProject..NashvilleHousing
SET SaleDateConverted = CONVERT(Date, SaleDate)


--Selecting new column for checking
SELECT SaleDateConverted
FROM PortfolioProject..NashvilleHousing



--2
--Populate Property Address Data
SELECT *
FROM PortfolioProject..NashvilleHousing
WHERE PropertyAddress IS NULL

--Some Property Address Values Are missing, but some ParcelID has Property Address and some has not with the same ParcelID
SELECT *
FROM PortfolioProject..NashvilleHousing
ORDER BY ParcelID

--Self Join To Fill The Nulls Values
SELECT a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress
FROM 
PortfolioProject..NashvilleHousing a
JOIN
PortfolioProject..NashvilleHousing b
ON a.ParcelID = b.ParcelID
AND a.[UniqueID ] <> b.[UniqueID ]
WHERE a.PropertyAddress IS NULL

--Using ISNULL() To Fill The Nulls Values with Data 
SELECT a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress, b.PropertyAddress)
FROM 
PortfolioProject..NashvilleHousing a
JOIN
PortfolioProject..NashvilleHousing b
ON a.ParcelID = b.ParcelID
AND a.[UniqueID ] <> b.[UniqueID ]
WHERE a.PropertyAddress IS NULL


--UPDATING PropertyAddress
UPDATE a
SET PropertyAddress = ISNULL(a.PropertyAddress, b.PropertyAddress)
FROM 
PortfolioProject..NashvilleHousing a
JOIN
PortfolioProject..NashvilleHousing b
ON a.ParcelID = b.ParcelID
AND a.[UniqueID ] <> b.[UniqueID ]
WHERE a.PropertyAddress IS NULL


--3
--Separating PropertyAddress into 2 columns (Address, City) Using SUBSTRING()
SELECT PropertyAddress 
FROM PortfolioProject..NashvilleHousing

--Address
SELECT PropertyAddress, SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1 ) AS Address
FROM PortfolioProject..NashvilleHousing

--City
SELECT 
PropertyAddress, SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1 ) AS Address,
SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) +1, LEN(PropertyAddress)) AS City
FROM PortfolioProject..NashvilleHousing


--Adding new columns for Address, City
ALTER TABLE PortfolioProject..NashvilleHousing
ADD Address Nvarchar(255),
City Nvarchar(255);

--Updating new columns
UPDATE PortfolioProject..NashvilleHousing
SET Address = SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1 ),
City = SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) +1, LEN(PropertyAddress));




--4
----Separating OwnerAddress into 3 columns (Address, City, State) Using PARSENAME()
SELECT OwnerAddress 
FROM PortfolioProject..NashvilleHousing

--PARSENAME only works with '.' and it works BACKWARDS
SELECT owneraddress, PARSENAME(REPLACE(OwnerAddress, ',', '.'), 3) AS NewOwnerAddress,  --Address
PARSENAME(REPLACE(OwnerAddress, ',', '.'), 2) AS OwnerCity,  --City
PARSENAME(REPLACE(OwnerAddress, ',', '.'), 1) AS OwnerState  --State
FROM PortfolioProject..NashvilleHousing



--Adding new columns for Address, City
ALTER TABLE PortfolioProject..NashvilleHousing
ADD NewOwnerAddress Nvarchar(255),
OwnerCity Nvarchar(255),
OwnerState Nvarchar(255);


--Updating new columns
UPDATE PortfolioProject..NashvilleHousing
SET NewOwnerAddress = PARSENAME(REPLACE(OwnerAddress, ',', '.'), 3),
OwnerCity = PARSENAME(REPLACE(OwnerAddress, ',', '.'), 2),
OwnerState = PARSENAME(REPLACE(OwnerAddress, ',', '.'), 1);



--5
--Changing Y and N to Yes and No in column "SoldAsVacant"
SELECT DISTINCT(SoldAsVacant), COUNT(SoldAsVacant)
FROM PortfolioProject..NashvilleHousing
GROUP BY SoldAsVacant


--Using Case Statement
SELECT SoldAsVacant,
CASE WHEN SoldAsVacant = 'Y' THEN 'Yes'
	 WHEN SoldAsVacant = 'N' THEN 'No'
	 ELSE SoldAsVacant
	 END
FROM PortfolioProject..NashvilleHousing


--Updating New Values
UPDATE PortfolioProject..NashvilleHousing
SET SoldAsVacant = CASE WHEN SoldAsVacant = 'Y' THEN 'Yes'
					    WHEN SoldAsVacant = 'N' THEN 'No'
					    ELSE SoldAsVacant
					    END


--6
--Remove Duplicates using CTE Table or WITH Statement
WITH rownum AS(
SELECT *, ROW_NUMBER() OVER (
	PARTITION BY ParcelID, PropertyAddress, SalePrice, SaleDate, LegalReference ORDER BY UniqueID) row_num
FROM PortfolioProject..NashvilleHousing
)
DELETE FROM rownum
WHERE row_num > 1



--7
--Deleting unused columns
 ALTER TABLE PortfolioProject..NashvilleHousing
 DROP COLUMN PropertyAddress, SaleDate, OwnerAddress, TaxDistrict
 
 
